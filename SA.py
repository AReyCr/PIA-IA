import numpy as np
import time

qq = 9

start_states = [
    [0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
]
start_state = start_states[qq]


weights_s = [
    [54.0, 88.0, 25.0, 10.0, 82.0], 
    [95.0, 87.0, 131.0, 44.0, 13.0, 49.0, 17.0, 193.0, 76.0, 28.0], 
    [147.0, 76.0, 152.0, 46.0, 20.0, 172.0, 45.0, 225.0, 74.0, 224.0], 
    [114.0, 129.0, 31.0, 13.0, 33.0, 19.0, 86.0, 12.0, 108.0, 1.0, 87.0, 71.0, 73.0, 193.0, 77.0, 47.0, 284.0, 10.0, 141.0, 179.0], 
    [43.0, 13.0, 109.0, 104.0, 101.0, 164.0, 55.0, 55.0, 132.0, 36.0, 18.0, 85.0, 111.0, 65.0, 78.0, 6.0, 40.0, 27.0, 147.0, 154.0], 
    [142.0, 161.0, 48.0, 171.0, 28.0, 157.0, 71.0, 58.0, 46.0, 190.0, 36.0, 8.0, 28.0, 50.0, 36.0, 11.0, 13.0, 52.0, 91.0, 8.0, 125.0, 36.0, 41.0, 185.0, 7.0, 124.0, 22.0, 103.0, 129.0, 5.0], 
    [106.0, 72.0, 13.0, 120.0, 69.0, 51.0, 37.0, 29.0, 54.0, 28.0, 40.0, 1.0, 51.0, 17.0, 7.0, 149.0, 122.0, 64.0, 197.0, 184.0, 107.0, 54.0, 16.0, 131.0, 182.0, 133.0, 42.0, 151.0, 14.0, 212.0], 
    [72.0, 73.0, 82.0, 107.0, 100.0, 89.0, 37.0, 55.0, 114.0, 91.0, 14.0, 36.0, 26.0, 56.0, 139.0, 100.0, 120.0, 11.0, 263.0, 157.0, 181.0, 153.0, 15.0, 33.0, 57.0, 153.0, 132.0, 1.0, 123.0, 81.0, 205.0, 176.0, 143.0, 191.0, 107.0, 67.0, 51.0, 17.0, 14.0, 58.0], 
    [64.0, 93.0, 50.0, 21.0, 13.0, 71.0, 261.0, 33.0, 62.0, 252.0, 20.0, 46.0, 101.0, 195.0, 176.0, 56.0, 67.0, 34.0, 14.0, 76.0, 17.0, 123.0, 43.0, 260.0, 39.0, 239.0, 130.0, 30.0, 35.0, 176.0, 201.0, 150.0, 182.0, 83.0, 18.0, 114.0, 231.0, 118.0, 92.0, 66.0], 
    [106.0, 153.0, 83.0, 97.0, 7.0, 45.0, 131.0, 17.0, 44.0, 88.0, 244.0, 102.0, 213.0, 85.0, 118.0, 1.0, 37.0, 41.0, 3.0, 22.0, 68.0, 22.0, 0.0, 15.0, 55.0, 17.0, 100.0, 20.0, 77.0, 25.0, 184.0, 13.0, 132.0, 92.0, 10.0, 255.0, 147.0, 150.0, 166.0, 165.0, 25.0, 51.0, 269.0, 33.0, 33.0, 44.0, 6.0, 221.0, 81.0, 58.0]
]
weights = weights_s[qq]

#for i in range(len(start_states)):
#    for j in range(len(start_states[i])):
#        weights_s[i].append(np.round(abs(np.random.normal(50,100))))
#print(weights_s)


values_s = [
    [4.0, 80.0, 40.0, 42.0, 48.0], 
    [140.0, 122.0, 57.0, 147.0, 79.0, 83.0, 202.0, 191.0, 6.0, 114.0], 
    [170.0, 201.0, 223.0, 135.0, 182.0, 226.0, 164.0, 51.0, 64.0, 57.0], 
    [170.0, 311.0, 306.0, 232.0, 234.0, 7.0, 216.0, 15.0, 261.0, 224.0, 282.0, 305.0, 107.0, 95.0, 27.0, 29.0, 24.0, 215.0, 95.0, 178.0], 
    [124.0, 143.0, 167.0, 53.0, 138.0, 169.0, 75.0, 112.0, 10.0, 101.0, 94.0, 121.0, 11.0, 22.0, 116.0, 97.0, 95.0, 81.0, 131.0, 94.0], 
    [163.0, 96.0, 133.0, 8.0, 51.0, 80.0, 149.0, 150.0, 1.0, 130.0, 177.0, 142.0, 20.0, 17.0, 129.0, 80.0, 168.0, 35.0, 49.0, 65.0, 206.0, 200.0, 24.0, 152.0, 142.0, 117.0, 70.0, 118.0, 38.0, 179.0], 
    [68.0, 103.0, 43.0, 36.0, 25.0, 229.0, 193.0, 78.0, 12.0, 88.0, 98.0, 30.0, 151.0, 203.0, 154.0, 115.0, 102.0, 65.0, 230.0, 68.0, 49.0, 55.0, 212.0, 108.0, 129.0, 15.0, 182.0, 117.0, 97.0, 205.0], 
    [40.0, 14.0, 7.0, 246.0, 10.0, 182.0, 284.0, 44.0, 47.0, 221.0, 153.0, 221.0, 79.0, 200.0, 32.0, 177.0, 59.0, 141.0, 179.0, 274.0, 2.0, 12.0, 141.0, 30.0, 29.0, 29.0, 102.0, 114.0, 197.0, 197.0, 277.0, 26.0, 278.0, 258.0, 113.0, 89.0, 174.0, 134.0, 104.0, 128.0], 
    [250.0, 39.0, 67.0, 33.0, 88.0, 47.0, 150.0, 167.0, 7.0, 263.0, 228.0, 45.0, 255.0, 49.0, 50.0, 94.0, 145.0, 170.0, 116.0, 234.0, 214.0, 38.0, 132.0, 116.0, 171.0, 37.0, 42.0, 232.0, 161.0, 98.0, 248.0, 175.0, 204.0, 229.0, 185.0, 284.0, 240.0, 146.0, 71.0, 39.0], 
    [286.0, 217.0, 96.0, 70.0, 43.0, 93.0, 126.0, 179.0, 288.0, 38.0, 172.0, 245.0, 130.0, 161.0, 196.0, 226.0, 292.0, 232.0, 231.0, 62.0, 280.0, 198.0, 198.0, 206.0, 296.0, 139.0, 148.0, 58.0, 31.0, 169.0, 121.0, 81.0, 167.0, 8.0, 179.0, 114.0, 157.0, 104.0, 104.0, 1.0, 235.0, 146.0, 40.0, 149.0, 92.0, 167.0, 287.0, 222.0, 148.0, 176.0]
]
values = values_s[qq]

#for i in range(len(start_states)):
#    for j in range(len(start_states[i])):
#        values_s[i].append(np.round(np.random.uniform(1,np.max(weights_s[i])*1.1)))
#print(values_s)


best_values = [
    162,
    887,
    1195,
    2885,
    1764,
    2611,
    2626,
    4382,
    4631,
    6871,
]
best_value = best_values[qq]


capacities = [
    150,350,600,800,1000,1100,1200,1800,2000,2200
]
capacity = capacities[qq]

def value(st):
    total_sum = 0
    total_wei = 0
    for i in range(len(st)):
        total_sum = total_sum + (st[i] * values[i])
    for i in range(len(st)):
        total_wei = total_wei + (st[i] * weights[i])
    if total_wei > capacity:
        return 0
    else:
        return total_sum


def random_solution(s):
     for i in range(len(s)):
          r = np.random.randint(1,100)
          if r < 50:
               if s[i] == 0:
                    s[i] = 1
               else:
                    s[i] = 0
     return s

aK = [100]
aT = [500]
aAlph = [0.1]

#for i in aK:
#     for j in aT:
#          for h in aAlph:

for i in range(10):
    for j in range(50):
        values = values_s[i]
        weights = weights_s[i]
        best_value = best_values[i]
        capacity = capacities[i]
        start_state = start_states[i]
        
        K = aK[0]
        T = aT[0]
        alpha = aAlph[0]

        e = 0.01

        start_time = time.time()
        s = random_solution(start_state.copy())
        while value(s) == 0:
             s = random_solution(start_state.copy())

        sn = []
        k = 0

        while T >= e:

             k = k + 1
             x = np.random.randint(1,len(s))
             sn = random_solution(s.copy())
             while value(sn) == 0:
                  sn = random_solution(s.copy())
               
             s_cost = value(s)
             sn_cost = value(sn)

             if sn_cost >= s_cost:
                  s = sn
             else:
                  p = np.exp(-(s_cost-sn_cost)/T)
                  r = np.random.uniform(0,1)
                  if r <= p:
                       s = sn
             if k >= K:
                  T = T * alpha
                  k = 0

        total_time = time.time() - start_time
        print(i+1, j+1, value(s), total_time, best_value)